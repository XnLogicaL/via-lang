\doxysection{src/interpreter/api-\/impl.h File Reference}
\hypertarget{api-impl_8h}{}\label{api-impl_8h}\index{src/interpreter/api-\/impl.h@{src/interpreter/api-\/impl.h}}


Internal interpreter API implementation.  


{\ttfamily \#include "{}common.\+h"{}}\newline
{\ttfamily \#include "{}opcode.\+h"{}}\newline
{\ttfamily \#include "{}state.\+h"{}}\newline
{\ttfamily \#include "{}tdict.\+h"{}}\newline
{\ttfamily \#include "{}tarray.\+h"{}}\newline
{\ttfamily \#include "{}tfunction.\+h"{}}\newline
{\ttfamily \#include $<$utility/ustring.\+h$>$}\newline
{\ttfamily \#include $<$utility/memory.\+h$>$}\newline
Include dependency graph for api-\/impl.h\+:
% FIG 0
\doxysubsubsection*{Namespaces}
\begin{DoxyCompactItemize}
\item 
namespace \mbox{\hyperlink{namespacevia}{via}}
\begin{DoxyCompactList}\small\item\em All core compiler logic is within this namespace. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \mbox{\hyperlink{api-impl_8cpp_a4cd26f6f3328e39a50e1c90f31b6571f}{via\+::impl\+::\+\_\+\+\_\+set\+\_\+error\+\_\+state}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state, const std\+::string \&message)
\begin{DoxyCompactList}\small\item\em Sets the interpreter into an error state with a given message. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_af742ca97cad8814757daf11e3068271a}{via\+::impl\+::\+\_\+\+\_\+clear\+\_\+error\+\_\+state}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Clears any existing error state in the interpreter. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{api-impl_8cpp_a81385ff1ec3cefdbad07f815b3c1dd7b}{via\+::impl\+::\+\_\+\+\_\+has\+\_\+error}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Checks whether the interpreter is currently in an error state. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{api-impl_8cpp_aeae5dccdac42189c38e4926bff2c8a2b}{via\+::impl\+::\+\_\+\+\_\+handle\+\_\+error}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Handles a currently active error by unwinding the call stack. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \mbox{\hyperlink{api-impl_8cpp_a2106d97d58c30819e622312d1106558b}{via\+::impl\+::\+\_\+\+\_\+get\+\_\+constant}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state, size\+\_\+t index)
\begin{DoxyCompactList}\small\item\em Retrieves a constant value from the constant pool. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \mbox{\hyperlink{api-impl_8cpp_a5eb451305bdbdb464bcf386d5f02d476}{via\+::impl\+::\+\_\+\+\_\+type}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Returns the type of a value as a via string object. \end{DoxyCompactList}\item 
std\+::string \mbox{\hyperlink{api-impl_8h_a8eecf0f1315d9d96de176e68670392dc}{via\+::impl\+::\+\_\+\+\_\+type\+\_\+cxx}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Returns the type of a value as a C++ string. \end{DoxyCompactList}\item 
void \texorpdfstring{$\ast$}{*} \mbox{\hyperlink{api-impl_8cpp_a4ef504fb5d01c7e6c3511f151805bb96}{via\+::impl\+::\+\_\+\+\_\+to\+\_\+pointer}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Gets the raw pointer stored in a value, or NULL if not applicable. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1CallFrame}{Call\+Frame}} \texorpdfstring{$\ast$}{*} \mbox{\hyperlink{api-impl_8cpp_a7d9f649786268619130df211747964b6}{via\+::impl\+::\+\_\+\+\_\+current\+\_\+callframe}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Returns the current call frame on the stack. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_ae431abdae5b290fd9a4e94fb081d9870}{via\+::impl\+::\+\_\+\+\_\+push\+\_\+callframe}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state, \mbox{\hyperlink{structvia_1_1CallFrame}{Call\+Frame}} \&\&frame)
\begin{DoxyCompactList}\small\item\em Pushes a new call frame onto the call stack. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_ac0fad757c80c9677da8c1fd74a11b5a9}{via\+::impl\+::\+\_\+\+\_\+pop\+\_\+callframe}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Pops the topmost call frame from the stack. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_a8cd3ad4def1091017a4f0f88317b881a}{via\+::impl\+::\+\_\+\+\_\+call}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state, \mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}callee)
\begin{DoxyCompactList}\small\item\em Calls a function using a dynamic dispatch system. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_a8c8c20ab51a9a5036ff3d34d24b4fede}{via\+::impl\+::\+\_\+\+\_\+return}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}VIA\+\_\+\+RESTRICT state, \mbox{\hyperlink{structvia_1_1Value}{Value}} \&\&retv)
\begin{DoxyCompactList}\small\item\em Performs a return from a function. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \mbox{\hyperlink{api-impl_8h_a8da01dfba3d5b1e6cb977331d7c91fdb}{via\+::impl\+::\+\_\+\+\_\+length}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Returns the length of the given value as a \doxylink{structvia_1_1Value}{Value} object. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{api-impl_8h_a823c44d2678b58a47fdb95e6fd9c9fac}{via\+::impl\+::\+\_\+\+\_\+length\+\_\+cxx}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Returns the length of the given value as a C++ integer. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \mbox{\hyperlink{api-impl_8cpp_a9b0f712f4260e23318830a494e545c20}{via\+::impl\+::\+\_\+\+\_\+to\+\_\+string}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Converts the given value to a language-\/level \doxylink{structvia_1_1String}{String} object. \end{DoxyCompactList}\item 
std\+::string \mbox{\hyperlink{api-impl_8cpp_a8201d19b0b257f5041f2e6831fc1d8a9}{via\+::impl\+::\+\_\+\+\_\+to\+\_\+cxx\+\_\+string}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Converts the given value to a C++ {\ttfamily std\+::string}. \end{DoxyCompactList}\item 
std\+::string \mbox{\hyperlink{api-impl_8cpp_af24118695c82c58d99daff8f7d0e6d81}{via\+::impl\+::\+\_\+\+\_\+to\+\_\+literal\+\_\+cxx\+\_\+string}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Converts the value to a literal string without applying any escaping or transformation. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \mbox{\hyperlink{api-impl_8cpp_ab10107c318d8ef588ea5f2b273ae8dd6}{via\+::impl\+::\+\_\+\+\_\+to\+\_\+bool}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Converts a value to its boolean representation. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{api-impl_8cpp_a8c062131dc984f62e7e9ec4d94c2f90e}{via\+::impl\+::\+\_\+\+\_\+to\+\_\+cxx\+\_\+bool}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Returns the truthiness of a value as a native {\ttfamily bool}. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \mbox{\hyperlink{api-impl_8cpp_a7d17cd7748048463934ebd63d8249f5d}{via\+::impl\+::\+\_\+\+\_\+to\+\_\+int}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}V, const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Converts the given value to an integer \doxylink{structvia_1_1Value}{Value} or returns Nil if not possible. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \mbox{\hyperlink{api-impl_8cpp_a09ff273667ad0d5d43aeab1a62ec8642}{via\+::impl\+::\+\_\+\+\_\+to\+\_\+float}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}V, const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Converts the given value to a floating-\/point \doxylink{structvia_1_1Value}{Value} or returns Nil if not possible. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{api-impl_8cpp_a749fa162a7383eee7da2d03ceaeaa06a}{via\+::impl\+::\+\_\+\+\_\+compare}} (const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val0, const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val1)
\begin{DoxyCompactList}\small\item\em Deeply compares two values for equality. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_acba89c9f476ce75fe0c494ff93f35af8}{via\+::impl\+::\+\_\+\+\_\+closure\+\_\+upvs\+\_\+resize}} (\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}closure)
\begin{DoxyCompactList}\small\item\em Resizes the \doxylink{structvia_1_1UpValue}{Up\+Value} vector of the given closure. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{api-impl_8cpp_a66527f244d25826e103726b6147cb1fa}{via\+::impl\+::\+\_\+\+\_\+closure\+\_\+upvs\+\_\+range\+\_\+check}} (\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}closure, size\+\_\+t index)
\begin{DoxyCompactList}\small\item\em Checks if the given index is within bounds of the closure\textquotesingle{}s \doxylink{structvia_1_1UpValue}{Up\+Value} vector. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1UpValue}{Up\+Value}} \texorpdfstring{$\ast$}{*} \mbox{\hyperlink{api-impl_8cpp_a04aedc85bac678693d504ff44f864d31}{via\+::impl\+::\+\_\+\+\_\+closure\+\_\+upv\+\_\+get}} (\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}closure, size\+\_\+t upv\+\_\+id)
\begin{DoxyCompactList}\small\item\em Gets the \doxylink{structvia_1_1UpValue}{Up\+Value} at the specified index. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_ae9a1c50c44f71d9b9c5b9f4b4f8aac8c}{via\+::impl\+::\+\_\+\+\_\+closure\+\_\+upv\+\_\+set}} (\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}closure, size\+\_\+t upv\+\_\+id, \mbox{\hyperlink{structvia_1_1Value}{Value}} \&val)
\begin{DoxyCompactList}\small\item\em Sets the \doxylink{structvia_1_1UpValue}{Up\+Value} at the specified index to a given value. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_af2ce0a165a68eb25bf6cdb7958e2d17a}{via\+::impl\+::\+\_\+\+\_\+closure\+\_\+bytecode\+\_\+load}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state, \mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}closure, size\+\_\+t len)
\begin{DoxyCompactList}\small\item\em Loads bytecode instructions into the closure. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_ad73d8ba3542530fbc321b9e57f7deb6e}{via\+::impl\+::\+\_\+\+\_\+closure\+\_\+close\+\_\+upvalues}} (const \mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}closure)
\begin{DoxyCompactList}\small\item\em Closes the closure’s upvalues and moves them to the heap. \end{DoxyCompactList}\item 
size\+\_\+t \mbox{\hyperlink{api-impl_8cpp_a87fa71550e2e4ee414f8d39c70c75858}{via\+::impl\+::\+\_\+\+\_\+dict\+\_\+hash\+\_\+key}} (const \mbox{\hyperlink{structvia_1_1Dict}{Dict}} \texorpdfstring{$\ast$}{*}dict, const char \texorpdfstring{$\ast$}{*}key)
\begin{DoxyCompactList}\small\item\em Hashes a key string using FNV-\/1a. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_af079c70773c2f452cd234e8217f48f02}{via\+::impl\+::\+\_\+\+\_\+dict\+\_\+set}} (const \mbox{\hyperlink{structvia_1_1Dict}{Dict}} \texorpdfstring{$\ast$}{*}dict, const char \texorpdfstring{$\ast$}{*}key, \mbox{\hyperlink{structvia_1_1Value}{Value}} val)
\begin{DoxyCompactList}\small\item\em Sets a key-\/value pair in the dictionary. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \texorpdfstring{$\ast$}{*} \mbox{\hyperlink{api-impl_8cpp_a6d8d33c61a1827beb261a22c5054f06b}{via\+::impl\+::\+\_\+\+\_\+dict\+\_\+get}} (const \mbox{\hyperlink{structvia_1_1Dict}{Dict}} \texorpdfstring{$\ast$}{*}dict, const char \texorpdfstring{$\ast$}{*}key)
\begin{DoxyCompactList}\small\item\em Retrieves the value associated with a key. \end{DoxyCompactList}\item 
size\+\_\+t \mbox{\hyperlink{api-impl_8cpp_a6a07c06603c3669ed4d47385c222491c}{via\+::impl\+::\+\_\+\+\_\+dict\+\_\+size}} (const \mbox{\hyperlink{structvia_1_1Dict}{Dict}} \texorpdfstring{$\ast$}{*}dict)
\begin{DoxyCompactList}\small\item\em Returns number of entries in the dictionary. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{api-impl_8cpp_a6b859de1b1d0cafaafa4f2a273150648}{via\+::impl\+::\+\_\+\+\_\+array\+\_\+range\+\_\+check}} (const \mbox{\hyperlink{structvia_1_1Array}{Array}} \texorpdfstring{$\ast$}{*}array, size\+\_\+t index)
\begin{DoxyCompactList}\small\item\em Checks if an index is valid in the array. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_ae252e73b98e9c0c76f5835367f2e8ed4}{via\+::impl\+::\+\_\+\+\_\+array\+\_\+resize}} (\mbox{\hyperlink{structvia_1_1Array}{Array}} \texorpdfstring{$\ast$}{*}array)
\begin{DoxyCompactList}\small\item\em Resizes the array component of the table. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_a185214dd1c7f4b612a8db23ae381f4fe}{via\+::impl\+::\+\_\+\+\_\+array\+\_\+set}} (\mbox{\hyperlink{structvia_1_1Array}{Array}} \texorpdfstring{$\ast$}{*}array, size\+\_\+t index, \mbox{\hyperlink{structvia_1_1Value}{Value}} val)
\begin{DoxyCompactList}\small\item\em Sets a value at a specific index in the array. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \texorpdfstring{$\ast$}{*} \mbox{\hyperlink{api-impl_8cpp_ae3d23f5034a421d8c7b07b6d168cf60c}{via\+::impl\+::\+\_\+\+\_\+array\+\_\+get}} (const \mbox{\hyperlink{structvia_1_1Array}{Array}} \texorpdfstring{$\ast$}{*}array, size\+\_\+t index)
\begin{DoxyCompactList}\small\item\em Retrieves a value at a specific index. \end{DoxyCompactList}\item 
size\+\_\+t \mbox{\hyperlink{api-impl_8cpp_ae43b428e4d7782eb46140223bd2d501c}{via\+::impl\+::\+\_\+\+\_\+array\+\_\+size}} (const \mbox{\hyperlink{structvia_1_1Array}{Array}} \texorpdfstring{$\ast$}{*}array)
\begin{DoxyCompactList}\small\item\em Returns the current size (number of used elements) of the array. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_a905d6d8a36b08e183b26369d1a1dc29e}{via\+::impl\+::\+\_\+\+\_\+label\+\_\+allocate}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state, size\+\_\+t count)
\begin{DoxyCompactList}\small\item\em Allocates space for a set number of labels in the state. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_a369c304d13bb70952a6bd8b44b9e4f94}{via\+::impl\+::\+\_\+\+\_\+label\+\_\+deallocate}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Deallocates label memory in the given state. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Instruction}{Instruction}} \texorpdfstring{$\ast$}{*} \mbox{\hyperlink{api-impl_8cpp_afea89c2b3cb54fc4a769d9968bfdb735}{via\+::impl\+::\+\_\+\+\_\+label\+\_\+get}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state, size\+\_\+t index)
\begin{DoxyCompactList}\small\item\em Returns a pointer to a label instruction by index. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_a8efc60dec4544c5fd99b06bd17e72010}{via\+::impl\+::\+\_\+\+\_\+label\+\_\+load}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Loads the label instruction table into the state. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_ae3fe43c15ff8c8ddd9049c7e9efcedd8}{via\+::impl\+::\+\_\+\+\_\+push}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state, \mbox{\hyperlink{structvia_1_1Value}{Value}} \&\&val)
\begin{DoxyCompactList}\small\item\em Pushes a value onto the VM stack. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_a94d1c6da5b435c5d9ec671bf7f7529c8}{via\+::impl\+::\+\_\+\+\_\+drop}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Drops the top value from the VM stack. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \texorpdfstring{$\ast$}{*} \mbox{\hyperlink{api-impl_8cpp_a312f965320eb20d844a3d63d13b5ffd0}{via\+::impl\+::\+\_\+\+\_\+get\+\_\+local}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}VIA\+\_\+\+RESTRICT state, size\+\_\+t offset)
\begin{DoxyCompactList}\small\item\em Retrieves a local variable at a given offset. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_ad11cc854ba84612f7414d431d20c570a}{via\+::impl\+::\+\_\+\+\_\+set\+\_\+local}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}VIA\+\_\+\+RESTRICT state, size\+\_\+t offset, \mbox{\hyperlink{structvia_1_1Value}{Value}} \&\&val)
\begin{DoxyCompactList}\small\item\em Sets a local variable at a given offset. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_a04c9194b799e3c01282a07c7e8562453}{via\+::impl\+::\+\_\+\+\_\+register\+\_\+allocate}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Allocates the VM register table. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_ac769850f1e1e39d6eee72b13e22e12ae}{via\+::impl\+::\+\_\+\+\_\+register\+\_\+deallocate}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Frees the register table. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_a78049f0852af5f1fb215eb8fdce0338a}{via\+::impl\+::\+\_\+\+\_\+set\+\_\+register}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state, \mbox{\hyperlink{namespacevia_a90951ca238c08fe5449c13c9ed3cc38e}{operand\+\_\+t}} reg, \mbox{\hyperlink{structvia_1_1Value}{Value}} \&\&val)
\begin{DoxyCompactList}\small\item\em Assigns a value to a register. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Value}{Value}} \texorpdfstring{$\ast$}{*} \mbox{\hyperlink{api-impl_8cpp_a6c29ae090eb9848f02339078fcfb4ee2}{via\+::impl\+::\+\_\+\+\_\+get\+\_\+register}} (const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state, \mbox{\hyperlink{namespacevia_a90951ca238c08fe5449c13c9ed3cc38e}{operand\+\_\+t}} reg)
\begin{DoxyCompactList}\small\item\em Retrieves a value from a register. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*} \mbox{\hyperlink{api-impl_8cpp_abf32203d8f37b29bfbfc276fb9826a60}{via\+::impl\+::\+\_\+\+\_\+create\+\_\+main\+\_\+function}} (\mbox{\hyperlink{classvia_1_1TransUnitContext}{Trans\+Unit\+Context}} \&unit\+\_\+ctx)
\begin{DoxyCompactList}\small\item\em Creates the main function closure for a compilation unit. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{api-impl_8cpp_a66f3792513ab9aef3ed8cec6a9eeb6fc}{via\+::impl\+::\+\_\+\+\_\+declare\+\_\+core\+\_\+lib}} (\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}state)
\begin{DoxyCompactList}\small\item\em Declares the built-\/in core library into the interpreter state. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
Internal interpreter API implementation. 

Contains internal functions used by the via interpreter engine, including stack operations, value conversion, function calling, error propagation, closure management, dictionary/array manipulation, and register management. 

\doxysubsection{Function Documentation}
\Hypertarget{api-impl_8cpp_ae3d23f5034a421d8c7b07b6d168cf60c}\label{api-impl_8cpp_ae3d23f5034a421d8c7b07b6d168cf60c} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_array\_get@{\_\_array\_get}}
\index{\_\_array\_get@{\_\_array\_get}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_array\_get()}{\_\_array\_get()}}
{\footnotesize\ttfamily Value \texorpdfstring{$\ast$}{*} via\+::impl\+::\+\_\+\+\_\+array\+\_\+get (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Array}{Array}} \texorpdfstring{$\ast$}{*}}]{array,  }\item[{size\+\_\+t}]{index }\end{DoxyParamCaption})}



Retrieves a value at a specific index. 


\begin{DoxyParams}{Parameters}
{\em array} & Pointer to array. \\
\hline
{\em index} & Index to read. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Value\texorpdfstring{$\ast$}{*} Pointer to value or nullptr if out of bounds. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a6b859de1b1d0cafaafa4f2a273150648}\label{api-impl_8cpp_a6b859de1b1d0cafaafa4f2a273150648} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_array\_range\_check@{\_\_array\_range\_check}}
\index{\_\_array\_range\_check@{\_\_array\_range\_check}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_array\_range\_check()}{\_\_array\_range\_check()}}
{\footnotesize\ttfamily bool via\+::impl\+::\+\_\+\+\_\+array\+\_\+range\+\_\+check (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Array}{Array}} \texorpdfstring{$\ast$}{*}}]{array,  }\item[{size\+\_\+t}]{index }\end{DoxyParamCaption})}



Checks if an index is valid in the array. 


\begin{DoxyParams}{Parameters}
{\em array} & Pointer to array. \\
\hline
{\em index} & Index to check. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
bool True if valid, false otherwise. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_ae252e73b98e9c0c76f5835367f2e8ed4}\label{api-impl_8cpp_ae252e73b98e9c0c76f5835367f2e8ed4} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_array\_resize@{\_\_array\_resize}}
\index{\_\_array\_resize@{\_\_array\_resize}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_array\_resize()}{\_\_array\_resize()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+array\+\_\+resize (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1Array}{Array}} \texorpdfstring{$\ast$}{*}}]{array }\end{DoxyParamCaption})}



Resizes the array component of the table. 

Grows internal capacity to accommodate more elements.


\begin{DoxyParams}{Parameters}
{\em array} & Pointer to array. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a185214dd1c7f4b612a8db23ae381f4fe}\label{api-impl_8cpp_a185214dd1c7f4b612a8db23ae381f4fe} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_array\_set@{\_\_array\_set}}
\index{\_\_array\_set@{\_\_array\_set}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_array\_set()}{\_\_array\_set()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+array\+\_\+set (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1Array}{Array}} \texorpdfstring{$\ast$}{*}}]{array,  }\item[{size\+\_\+t}]{index,  }\item[{\mbox{\hyperlink{structvia_1_1Value}{Value}}}]{val }\end{DoxyParamCaption})}



Sets a value at a specific index in the array. 

Resizes if the index exceeds current capacity.


\begin{DoxyParams}{Parameters}
{\em array} & Pointer to array. \\
\hline
{\em index} & Index to assign. \\
\hline
{\em val} & Value to assign. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_ae43b428e4d7782eb46140223bd2d501c}\label{api-impl_8cpp_ae43b428e4d7782eb46140223bd2d501c} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_array\_size@{\_\_array\_size}}
\index{\_\_array\_size@{\_\_array\_size}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_array\_size()}{\_\_array\_size()}}
{\footnotesize\ttfamily size\+\_\+t via\+::impl\+::\+\_\+\+\_\+array\+\_\+size (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Array}{Array}} \texorpdfstring{$\ast$}{*}}]{array }\end{DoxyParamCaption})}



Returns the current size (number of used elements) of the array. 


\begin{DoxyParams}{Parameters}
{\em array} & Pointer to array. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
size\+\_\+t Array size. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a8cd3ad4def1091017a4f0f88317b881a}\label{api-impl_8cpp_a8cd3ad4def1091017a4f0f88317b881a} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_call@{\_\_call}}
\index{\_\_call@{\_\_call}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_call()}{\_\_call()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+call (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state,  }\item[{\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}}]{callee }\end{DoxyParamCaption})}



Calls a function using a dynamic dispatch system. 

Supports native and external function types. 
\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
{\em callee} & Function to call. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_af742ca97cad8814757daf11e3068271a}\label{api-impl_8cpp_af742ca97cad8814757daf11e3068271a} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_clear\_error\_state@{\_\_clear\_error\_state}}
\index{\_\_clear\_error\_state@{\_\_clear\_error\_state}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_clear\_error\_state()}{\_\_clear\_error\_state()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+clear\+\_\+error\+\_\+state (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Clears any existing error state in the interpreter. 


\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_af2ce0a165a68eb25bf6cdb7958e2d17a}\label{api-impl_8cpp_af2ce0a165a68eb25bf6cdb7958e2d17a} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_closure\_bytecode\_load@{\_\_closure\_bytecode\_load}}
\index{\_\_closure\_bytecode\_load@{\_\_closure\_bytecode\_load}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_closure\_bytecode\_load()}{\_\_closure\_bytecode\_load()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+closure\+\_\+bytecode\+\_\+load (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state,  }\item[{\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}}]{closure,  }\item[{size\+\_\+t}]{len }\end{DoxyParamCaption})}



Loads bytecode instructions into the closure. 

Handles special opcodes like RET and CAPTURE during loading.


\begin{DoxyParams}{Parameters}
{\em state} & Runtime state. \\
\hline
{\em closure} & Target closure. \\
\hline
{\em len} & Length of bytecode stream. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_ad73d8ba3542530fbc321b9e57f7deb6e}\label{api-impl_8cpp_ad73d8ba3542530fbc321b9e57f7deb6e} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_closure\_close\_upvalues@{\_\_closure\_close\_upvalues}}
\index{\_\_closure\_close\_upvalues@{\_\_closure\_close\_upvalues}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_closure\_close\_upvalues()}{\_\_closure\_close\_upvalues()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+closure\+\_\+close\+\_\+upvalues (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}}]{closure }\end{DoxyParamCaption})}



Closes the closure’s upvalues and moves them to the heap. 

Typically used at function return to preserve captured variables.


\begin{DoxyParams}{Parameters}
{\em closure} & The closure whose upvalues to close. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a04aedc85bac678693d504ff44f864d31}\label{api-impl_8cpp_a04aedc85bac678693d504ff44f864d31} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_closure\_upv\_get@{\_\_closure\_upv\_get}}
\index{\_\_closure\_upv\_get@{\_\_closure\_upv\_get}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_closure\_upv\_get()}{\_\_closure\_upv\_get()}}
{\footnotesize\ttfamily Up\+Value \texorpdfstring{$\ast$}{*} via\+::impl\+::\+\_\+\+\_\+closure\+\_\+upv\+\_\+get (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}}]{closure,  }\item[{size\+\_\+t}]{upv\+\_\+id }\end{DoxyParamCaption})}



Gets the Up\+Value at the specified index. 


\begin{DoxyParams}{Parameters}
{\em closure} & Pointer to the closure. \\
\hline
{\em upv\+\_\+id} & Index of the Up\+Value. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Up\+Value\texorpdfstring{$\ast$}{*} Pointer to Up\+Value or nullptr if out of bounds. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_ae9a1c50c44f71d9b9c5b9f4b4f8aac8c}\label{api-impl_8cpp_ae9a1c50c44f71d9b9c5b9f4b4f8aac8c} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_closure\_upv\_set@{\_\_closure\_upv\_set}}
\index{\_\_closure\_upv\_set@{\_\_closure\_upv\_set}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_closure\_upv\_set()}{\_\_closure\_upv\_set()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+closure\+\_\+upv\+\_\+set (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}}]{closure,  }\item[{size\+\_\+t}]{upv\+\_\+id,  }\item[{\mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Sets the Up\+Value at the specified index to a given value. 


\begin{DoxyParams}{Parameters}
{\em closure} & Pointer to the closure. \\
\hline
{\em upv\+\_\+id} & Index of the Up\+Value. \\
\hline
{\em val} & Value to set. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a66527f244d25826e103726b6147cb1fa}\label{api-impl_8cpp_a66527f244d25826e103726b6147cb1fa} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_closure\_upvs\_range\_check@{\_\_closure\_upvs\_range\_check}}
\index{\_\_closure\_upvs\_range\_check@{\_\_closure\_upvs\_range\_check}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_closure\_upvs\_range\_check()}{\_\_closure\_upvs\_range\_check()}}
{\footnotesize\ttfamily bool via\+::impl\+::\+\_\+\+\_\+closure\+\_\+upvs\+\_\+range\+\_\+check (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}}]{closure,  }\item[{size\+\_\+t}]{index }\end{DoxyParamCaption})}



Checks if the given index is within bounds of the closure\textquotesingle{}s Up\+Value vector. 


\begin{DoxyParams}{Parameters}
{\em closure} & Pointer to the closure. \\
\hline
{\em index} & Index to validate. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
bool True if within range, false otherwise. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_acba89c9f476ce75fe0c494ff93f35af8}\label{api-impl_8cpp_acba89c9f476ce75fe0c494ff93f35af8} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_closure\_upvs\_resize@{\_\_closure\_upvs\_resize}}
\index{\_\_closure\_upvs\_resize@{\_\_closure\_upvs\_resize}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_closure\_upvs\_resize()}{\_\_closure\_upvs\_resize()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+closure\+\_\+upvs\+\_\+resize (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1Closure}{Closure}} \texorpdfstring{$\ast$}{*}}]{closure }\end{DoxyParamCaption})}



Resizes the Up\+Value vector of the given closure. 

\begin{DoxyNote}{Note}
The vector is grown by a constant {\ttfamily VIA\+\_\+\+UPV\+\_\+\+RESIZE\+\_\+\+FACTOR}. 
\end{DoxyNote}

\begin{DoxyParams}{Parameters}
{\em closure} & Pointer to the closure. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a749fa162a7383eee7da2d03ceaeaa06a}\label{api-impl_8cpp_a749fa162a7383eee7da2d03ceaeaa06a} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_compare@{\_\_compare}}
\index{\_\_compare@{\_\_compare}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_compare()}{\_\_compare()}}
{\footnotesize\ttfamily bool via\+::impl\+::\+\_\+\+\_\+compare (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val0,  }\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val1 }\end{DoxyParamCaption})}



Deeply compares two values for equality. 

Handles primitive types and recursively compares structures like arrays and dictionaries.


\begin{DoxyParams}{Parameters}
{\em val0} & First value. \\
\hline
{\em val1} & Second value. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
bool True if values are deeply equal, false otherwise. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_abf32203d8f37b29bfbfc276fb9826a60}\label{api-impl_8cpp_abf32203d8f37b29bfbfc276fb9826a60} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_create\_main\_function@{\_\_create\_main\_function}}
\index{\_\_create\_main\_function@{\_\_create\_main\_function}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_create\_main\_function()}{\_\_create\_main\_function()}}
{\footnotesize\ttfamily Closure \texorpdfstring{$\ast$}{*} via\+::impl\+::\+\_\+\+\_\+create\+\_\+main\+\_\+function (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classvia_1_1TransUnitContext}{Trans\+Unit\+Context}} \&}]{unit\+\_\+ctx }\end{DoxyParamCaption})}



Creates the main function closure for a compilation unit. 


\begin{DoxyParams}{Parameters}
{\em unit\+\_\+ctx} & Translation unit context. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Pointer to main closure. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a7d9f649786268619130df211747964b6}\label{api-impl_8cpp_a7d9f649786268619130df211747964b6} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_current\_callframe@{\_\_current\_callframe}}
\index{\_\_current\_callframe@{\_\_current\_callframe}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_current\_callframe()}{\_\_current\_callframe()}}
{\footnotesize\ttfamily Call\+Frame \texorpdfstring{$\ast$}{*} via\+::impl\+::\+\_\+\+\_\+current\+\_\+callframe (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Returns the current call frame on the stack. 


\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Pointer to the current call frame. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a66f3792513ab9aef3ed8cec6a9eeb6fc}\label{api-impl_8cpp_a66f3792513ab9aef3ed8cec6a9eeb6fc} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_declare\_core\_lib@{\_\_declare\_core\_lib}}
\index{\_\_declare\_core\_lib@{\_\_declare\_core\_lib}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_declare\_core\_lib()}{\_\_declare\_core\_lib()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+declare\+\_\+core\+\_\+lib (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Declares the built-\/in core library into the interpreter state. 


\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a6d8d33c61a1827beb261a22c5054f06b}\label{api-impl_8cpp_a6d8d33c61a1827beb261a22c5054f06b} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_dict\_get@{\_\_dict\_get}}
\index{\_\_dict\_get@{\_\_dict\_get}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_dict\_get()}{\_\_dict\_get()}}
{\footnotesize\ttfamily Value \texorpdfstring{$\ast$}{*} via\+::impl\+::\+\_\+\+\_\+dict\+\_\+get (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Dict}{Dict}} \texorpdfstring{$\ast$}{*}}]{dict,  }\item[{const char \texorpdfstring{$\ast$}{*}}]{key }\end{DoxyParamCaption})}



Retrieves the value associated with a key. 


\begin{DoxyParams}{Parameters}
{\em dict} & Pointer to dictionary. \\
\hline
{\em key} & Null-\/terminated key string. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Value\texorpdfstring{$\ast$}{*} Pointer to value or nullptr if key not found. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a87fa71550e2e4ee414f8d39c70c75858}\label{api-impl_8cpp_a87fa71550e2e4ee414f8d39c70c75858} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_dict\_hash\_key@{\_\_dict\_hash\_key}}
\index{\_\_dict\_hash\_key@{\_\_dict\_hash\_key}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_dict\_hash\_key()}{\_\_dict\_hash\_key()}}
{\footnotesize\ttfamily size\+\_\+t via\+::impl\+::\+\_\+\+\_\+dict\+\_\+hash\+\_\+key (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Dict}{Dict}} \texorpdfstring{$\ast$}{*}}]{dict,  }\item[{const char \texorpdfstring{$\ast$}{*}}]{key }\end{DoxyParamCaption})}



Hashes a key string using FNV-\/1a. 


\begin{DoxyParams}{Parameters}
{\em dict} & Dictionary context. \\
\hline
{\em key} & Null-\/terminated string key. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
size\+\_\+t Hash value. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_af079c70773c2f452cd234e8217f48f02}\label{api-impl_8cpp_af079c70773c2f452cd234e8217f48f02} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_dict\_set@{\_\_dict\_set}}
\index{\_\_dict\_set@{\_\_dict\_set}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_dict\_set()}{\_\_dict\_set()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+dict\+\_\+set (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Dict}{Dict}} \texorpdfstring{$\ast$}{*}}]{dict,  }\item[{const char \texorpdfstring{$\ast$}{*}}]{key,  }\item[{\mbox{\hyperlink{structvia_1_1Value}{Value}}}]{val }\end{DoxyParamCaption})}



Sets a key-\/value pair in the dictionary. 

Updates existing key if already present.


\begin{DoxyParams}{Parameters}
{\em dict} & Pointer to dictionary. \\
\hline
{\em key} & Null-\/terminated key. \\
\hline
{\em val} & Value to insert. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a6a07c06603c3669ed4d47385c222491c}\label{api-impl_8cpp_a6a07c06603c3669ed4d47385c222491c} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_dict\_size@{\_\_dict\_size}}
\index{\_\_dict\_size@{\_\_dict\_size}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_dict\_size()}{\_\_dict\_size()}}
{\footnotesize\ttfamily size\+\_\+t via\+::impl\+::\+\_\+\+\_\+dict\+\_\+size (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Dict}{Dict}} \texorpdfstring{$\ast$}{*}}]{dict }\end{DoxyParamCaption})}



Returns number of entries in the dictionary. 


\begin{DoxyParams}{Parameters}
{\em dict} & Pointer to dictionary. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
size\+\_\+t Number of key-\/value pairs. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a94d1c6da5b435c5d9ec671bf7f7529c8}\label{api-impl_8cpp_a94d1c6da5b435c5d9ec671bf7f7529c8} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_drop@{\_\_drop}}
\index{\_\_drop@{\_\_drop}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_drop()}{\_\_drop()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+drop (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Drops the top value from the VM stack. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a2106d97d58c30819e622312d1106558b}\label{api-impl_8cpp_a2106d97d58c30819e622312d1106558b} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_get\_constant@{\_\_get\_constant}}
\index{\_\_get\_constant@{\_\_get\_constant}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_get\_constant()}{\_\_get\_constant()}}
{\footnotesize\ttfamily Value via\+::impl\+::\+\_\+\+\_\+get\+\_\+constant (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state,  }\item[{size\+\_\+t}]{index }\end{DoxyParamCaption})}



Retrieves a constant value from the constant pool. 


\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
{\em index} & Index of the constant. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The constant value. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a312f965320eb20d844a3d63d13b5ffd0}\label{api-impl_8cpp_a312f965320eb20d844a3d63d13b5ffd0} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_get\_local@{\_\_get\_local}}
\index{\_\_get\_local@{\_\_get\_local}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_get\_local()}{\_\_get\_local()}}
{\footnotesize\ttfamily Value \texorpdfstring{$\ast$}{*} via\+::impl\+::\+\_\+\+\_\+get\+\_\+local (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}VIA\+\_\+\+RESTRICT}]{state,  }\item[{size\+\_\+t}]{offset }\end{DoxyParamCaption})}



Retrieves a local variable at a given offset. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
{\em offset} & Stack frame offset. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Value\texorpdfstring{$\ast$}{*} Pointer to local value. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a6c29ae090eb9848f02339078fcfb4ee2}\label{api-impl_8cpp_a6c29ae090eb9848f02339078fcfb4ee2} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_get\_register@{\_\_get\_register}}
\index{\_\_get\_register@{\_\_get\_register}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_get\_register()}{\_\_get\_register()}}
{\footnotesize\ttfamily Value \texorpdfstring{$\ast$}{*} via\+::impl\+::\+\_\+\+\_\+get\+\_\+register (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state,  }\item[{\mbox{\hyperlink{namespacevia_a90951ca238c08fe5449c13c9ed3cc38e}{operand\+\_\+t}}}]{reg }\end{DoxyParamCaption})}



Retrieves a value from a register. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
{\em reg} & Register index. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Value\texorpdfstring{$\ast$}{*} Pointer to register value. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_aeae5dccdac42189c38e4926bff2c8a2b}\label{api-impl_8cpp_aeae5dccdac42189c38e4926bff2c8a2b} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_handle\_error@{\_\_handle\_error}}
\index{\_\_handle\_error@{\_\_handle\_error}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_handle\_error()}{\_\_handle\_error()}}
{\footnotesize\ttfamily bool via\+::impl\+::\+\_\+\+\_\+handle\+\_\+error (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Handles a currently active error by unwinding the call stack. 

Will terminate the program if no handler is found. 
\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
true if the error was successfully handled; false otherwise. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a81385ff1ec3cefdbad07f815b3c1dd7b}\label{api-impl_8cpp_a81385ff1ec3cefdbad07f815b3c1dd7b} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_has\_error@{\_\_has\_error}}
\index{\_\_has\_error@{\_\_has\_error}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_has\_error()}{\_\_has\_error()}}
{\footnotesize\ttfamily bool via\+::impl\+::\+\_\+\+\_\+has\+\_\+error (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Checks whether the interpreter is currently in an error state. 


\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
true if an error is currently set; false otherwise. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a905d6d8a36b08e183b26369d1a1dc29e}\label{api-impl_8cpp_a905d6d8a36b08e183b26369d1a1dc29e} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_label\_allocate@{\_\_label\_allocate}}
\index{\_\_label\_allocate@{\_\_label\_allocate}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_label\_allocate()}{\_\_label\_allocate()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+label\+\_\+allocate (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state,  }\item[{size\+\_\+t}]{count }\end{DoxyParamCaption})}



Allocates space for a set number of labels in the state. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
{\em count} & Number of labels to allocate. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a369c304d13bb70952a6bd8b44b9e4f94}\label{api-impl_8cpp_a369c304d13bb70952a6bd8b44b9e4f94} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_label\_deallocate@{\_\_label\_deallocate}}
\index{\_\_label\_deallocate@{\_\_label\_deallocate}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_label\_deallocate()}{\_\_label\_deallocate()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+label\+\_\+deallocate (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Deallocates label memory in the given state. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_afea89c2b3cb54fc4a769d9968bfdb735}\label{api-impl_8cpp_afea89c2b3cb54fc4a769d9968bfdb735} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_label\_get@{\_\_label\_get}}
\index{\_\_label\_get@{\_\_label\_get}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_label\_get()}{\_\_label\_get()}}
{\footnotesize\ttfamily Instruction \texorpdfstring{$\ast$}{*} via\+::impl\+::\+\_\+\+\_\+label\+\_\+get (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state,  }\item[{size\+\_\+t}]{index }\end{DoxyParamCaption})}



Returns a pointer to a label instruction by index. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
{\em index} & Index of label. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Instruction\texorpdfstring{$\ast$}{*} Pointer to instruction or nullptr. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a8efc60dec4544c5fd99b06bd17e72010}\label{api-impl_8cpp_a8efc60dec4544c5fd99b06bd17e72010} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_label\_load@{\_\_label\_load}}
\index{\_\_label\_load@{\_\_label\_load}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_label\_load()}{\_\_label\_load()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+label\+\_\+load (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Loads the label instruction table into the state. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8h_a8da01dfba3d5b1e6cb977331d7c91fdb}\label{api-impl_8h_a8da01dfba3d5b1e6cb977331d7c91fdb} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_length@{\_\_length}}
\index{\_\_length@{\_\_length}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_length()}{\_\_length()}}
{\footnotesize\ttfamily Value via\+::impl\+::\+\_\+\+\_\+length (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Returns the length of the given value as a Value object. 

Supports arrays, strings, and dictionaries. Returns Nil if length cannot be determined.


\begin{DoxyParams}{Parameters}
{\em val} & The value to get the length of. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Value Length as an integer Value or Nil. 
\end{DoxyReturn}
\Hypertarget{api-impl_8h_a823c44d2678b58a47fdb95e6fd9c9fac}\label{api-impl_8h_a823c44d2678b58a47fdb95e6fd9c9fac} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_length\_cxx@{\_\_length\_cxx}}
\index{\_\_length\_cxx@{\_\_length\_cxx}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_length\_cxx()}{\_\_length\_cxx()}}
{\footnotesize\ttfamily int via\+::impl\+::\+\_\+\+\_\+length\+\_\+cxx (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Returns the length of the given value as a C++ integer. 

Returns -\/1 if the value has no meaningful length (e.\+g., number, bool, nil).


\begin{DoxyParams}{Parameters}
{\em val} & The value to get the length of. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
int Length or -\/1 on failure. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_ac0fad757c80c9677da8c1fd74a11b5a9}\label{api-impl_8cpp_ac0fad757c80c9677da8c1fd74a11b5a9} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_pop\_callframe@{\_\_pop\_callframe}}
\index{\_\_pop\_callframe@{\_\_pop\_callframe}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_pop\_callframe()}{\_\_pop\_callframe()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+pop\+\_\+callframe (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Pops the topmost call frame from the stack. 


\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_ae3fe43c15ff8c8ddd9049c7e9efcedd8}\label{api-impl_8cpp_ae3fe43c15ff8c8ddd9049c7e9efcedd8} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_push@{\_\_push}}
\index{\_\_push@{\_\_push}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_push()}{\_\_push()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+push (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state,  }\item[{\mbox{\hyperlink{structvia_1_1Value}{Value}} \&\&}]{val }\end{DoxyParamCaption})}



Pushes a value onto the VM stack. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
{\em val} & Value to push. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_ae431abdae5b290fd9a4e94fb081d9870}\label{api-impl_8cpp_ae431abdae5b290fd9a4e94fb081d9870} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_push\_callframe@{\_\_push\_callframe}}
\index{\_\_push\_callframe@{\_\_push\_callframe}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_push\_callframe()}{\_\_push\_callframe()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+push\+\_\+callframe (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state,  }\item[{\mbox{\hyperlink{structvia_1_1CallFrame}{Call\+Frame}} \&\&}]{frame }\end{DoxyParamCaption})}



Pushes a new call frame onto the call stack. 


\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
{\em frame} & Call frame to push. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a04c9194b799e3c01282a07c7e8562453}\label{api-impl_8cpp_a04c9194b799e3c01282a07c7e8562453} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_register\_allocate@{\_\_register\_allocate}}
\index{\_\_register\_allocate@{\_\_register\_allocate}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_register\_allocate()}{\_\_register\_allocate()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+register\+\_\+allocate (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Allocates the VM register table. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_ac769850f1e1e39d6eee72b13e22e12ae}\label{api-impl_8cpp_ac769850f1e1e39d6eee72b13e22e12ae} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_register\_deallocate@{\_\_register\_deallocate}}
\index{\_\_register\_deallocate@{\_\_register\_deallocate}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_register\_deallocate()}{\_\_register\_deallocate()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+register\+\_\+deallocate (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state }\end{DoxyParamCaption})}



Frees the register table. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a8c8c20ab51a9a5036ff3d34d24b4fede}\label{api-impl_8cpp_a8c8c20ab51a9a5036ff3d34d24b4fede} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_return@{\_\_return}}
\index{\_\_return@{\_\_return}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_return()}{\_\_return()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+return (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}VIA\+\_\+\+RESTRICT}]{state,  }\item[{\mbox{\hyperlink{structvia_1_1Value}{Value}} \&\&}]{retv }\end{DoxyParamCaption})}



Performs a return from a function. 

Restores the previous call frame and pushes a return value. 
\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
{\em retv} & Value to return. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a4cd26f6f3328e39a50e1c90f31b6571f}\label{api-impl_8cpp_a4cd26f6f3328e39a50e1c90f31b6571f} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_set\_error\_state@{\_\_set\_error\_state}}
\index{\_\_set\_error\_state@{\_\_set\_error\_state}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_set\_error\_state()}{\_\_set\_error\_state()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+set\+\_\+error\+\_\+state (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state,  }\item[{const std\+::string \&}]{message }\end{DoxyParamCaption})}



Sets the interpreter into an error state with a given message. 


\begin{DoxyParams}{Parameters}
{\em state} & Interpreter state. \\
\hline
{\em message} & The error message. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_ad11cc854ba84612f7414d431d20c570a}\label{api-impl_8cpp_ad11cc854ba84612f7414d431d20c570a} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_set\_local@{\_\_set\_local}}
\index{\_\_set\_local@{\_\_set\_local}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_set\_local()}{\_\_set\_local()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+set\+\_\+local (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}VIA\+\_\+\+RESTRICT}]{state,  }\item[{size\+\_\+t}]{offset,  }\item[{\mbox{\hyperlink{structvia_1_1Value}{Value}} \&\&}]{val }\end{DoxyParamCaption})}



Sets a local variable at a given offset. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
{\em offset} & Stack frame offset. \\
\hline
{\em val} & Value to set. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_a78049f0852af5f1fb215eb8fdce0338a}\label{api-impl_8cpp_a78049f0852af5f1fb215eb8fdce0338a} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_set\_register@{\_\_set\_register}}
\index{\_\_set\_register@{\_\_set\_register}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_set\_register()}{\_\_set\_register()}}
{\footnotesize\ttfamily void via\+::impl\+::\+\_\+\+\_\+set\+\_\+register (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{state,  }\item[{\mbox{\hyperlink{namespacevia_a90951ca238c08fe5449c13c9ed3cc38e}{operand\+\_\+t}}}]{reg,  }\item[{\mbox{\hyperlink{structvia_1_1Value}{Value}} \&\&}]{val }\end{DoxyParamCaption})}



Assigns a value to a register. 


\begin{DoxyParams}{Parameters}
{\em state} & The runtime state. \\
\hline
{\em reg} & Register index. \\
\hline
{\em val} & Value to assign. \\
\hline
\end{DoxyParams}
\Hypertarget{api-impl_8cpp_ab10107c318d8ef588ea5f2b273ae8dd6}\label{api-impl_8cpp_ab10107c318d8ef588ea5f2b273ae8dd6} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_to\_bool@{\_\_to\_bool}}
\index{\_\_to\_bool@{\_\_to\_bool}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_to\_bool()}{\_\_to\_bool()}}
{\footnotesize\ttfamily Value via\+::impl\+::\+\_\+\+\_\+to\+\_\+bool (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Converts a value to its boolean representation. 

Applies standard truthiness rules\+:
\begin{DoxyItemize}
\item false and nil are false,
\item everything else is true.
\end{DoxyItemize}


\begin{DoxyParams}{Parameters}
{\em val} & The value to evaluate. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Value A boolean Value representing the truthiness. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a8c062131dc984f62e7e9ec4d94c2f90e}\label{api-impl_8cpp_a8c062131dc984f62e7e9ec4d94c2f90e} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_to\_cxx\_bool@{\_\_to\_cxx\_bool}}
\index{\_\_to\_cxx\_bool@{\_\_to\_cxx\_bool}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_to\_cxx\_bool()}{\_\_to\_cxx\_bool()}}
{\footnotesize\ttfamily bool via\+::impl\+::\+\_\+\+\_\+to\+\_\+cxx\+\_\+bool (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Returns the truthiness of a value as a native {\ttfamily bool}. 

Same logic as {\ttfamily \+\_\+\+\_\+to\+\_\+bool}, but returns a C++ boolean.


\begin{DoxyParams}{Parameters}
{\em val} & The value to evaluate. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
bool True if value is truthy, false otherwise. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a8201d19b0b257f5041f2e6831fc1d8a9}\label{api-impl_8cpp_a8201d19b0b257f5041f2e6831fc1d8a9} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_to\_cxx\_string@{\_\_to\_cxx\_string}}
\index{\_\_to\_cxx\_string@{\_\_to\_cxx\_string}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_to\_cxx\_string()}{\_\_to\_cxx\_string()}}
{\footnotesize\ttfamily std\+::string via\+::impl\+::\+\_\+\+\_\+to\+\_\+cxx\+\_\+string (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Converts the given value to a C++ {\ttfamily std\+::string}. 

Performs the same logic as {\ttfamily \+\_\+\+\_\+to\+\_\+string}, but returns a native string.


\begin{DoxyParams}{Parameters}
{\em val} & The value to convert. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
std\+::string The stringified value. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a09ff273667ad0d5d43aeab1a62ec8642}\label{api-impl_8cpp_a09ff273667ad0d5d43aeab1a62ec8642} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_to\_float@{\_\_to\_float}}
\index{\_\_to\_float@{\_\_to\_float}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_to\_float()}{\_\_to\_float()}}
{\footnotesize\ttfamily Value via\+::impl\+::\+\_\+\+\_\+to\+\_\+float (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{V,  }\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Converts the given value to a floating-\/point Value or returns Nil if not possible. 

Performs conversion from strings or integers as needed.


\begin{DoxyParams}{Parameters}
{\em V} & The VM state (used for allocations or error tracking). \\
\hline
{\em val} & The value to convert. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Value Float Value or Nil. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a7d17cd7748048463934ebd63d8249f5d}\label{api-impl_8cpp_a7d17cd7748048463934ebd63d8249f5d} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_to\_int@{\_\_to\_int}}
\index{\_\_to\_int@{\_\_to\_int}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_to\_int()}{\_\_to\_int()}}
{\footnotesize\ttfamily Value via\+::impl\+::\+\_\+\+\_\+to\+\_\+int (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1State}{State}} \texorpdfstring{$\ast$}{*}}]{V,  }\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Converts the given value to an integer Value or returns Nil if not possible. 

Attempts string-\/to-\/int and float-\/to-\/int conversion if applicable.


\begin{DoxyParams}{Parameters}
{\em V} & The VM state (used for allocations or error tracking). \\
\hline
{\em val} & The value to convert. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Value Integer Value or Nil. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_af24118695c82c58d99daff8f7d0e6d81}\label{api-impl_8cpp_af24118695c82c58d99daff8f7d0e6d81} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_to\_literal\_cxx\_string@{\_\_to\_literal\_cxx\_string}}
\index{\_\_to\_literal\_cxx\_string@{\_\_to\_literal\_cxx\_string}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_to\_literal\_cxx\_string()}{\_\_to\_literal\_cxx\_string()}}
{\footnotesize\ttfamily std\+::string via\+::impl\+::\+\_\+\+\_\+to\+\_\+literal\+\_\+cxx\+\_\+string (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Converts the value to a literal string without applying any escaping or transformation. 

Useful for printing raw string content.


\begin{DoxyParams}{Parameters}
{\em val} & The value to convert. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
std\+::string The raw literal string. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a4ef504fb5d01c7e6c3511f151805bb96}\label{api-impl_8cpp_a4ef504fb5d01c7e6c3511f151805bb96} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_to\_pointer@{\_\_to\_pointer}}
\index{\_\_to\_pointer@{\_\_to\_pointer}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_to\_pointer()}{\_\_to\_pointer()}}
{\footnotesize\ttfamily void \texorpdfstring{$\ast$}{*} via\+::impl\+::\+\_\+\+\_\+to\+\_\+pointer (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Gets the raw pointer stored in a value, or NULL if not applicable. 


\begin{DoxyParams}{Parameters}
{\em val} & The value to inspect. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The underlying pointer. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a9b0f712f4260e23318830a494e545c20}\label{api-impl_8cpp_a9b0f712f4260e23318830a494e545c20} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_to\_string@{\_\_to\_string}}
\index{\_\_to\_string@{\_\_to\_string}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_to\_string()}{\_\_to\_string()}}
{\footnotesize\ttfamily Value via\+::impl\+::\+\_\+\+\_\+to\+\_\+string (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Converts the given value to a language-\/level String object. 

Uses the value\textquotesingle{}s stringification rules defined by the VM or language runtime.


\begin{DoxyParams}{Parameters}
{\em val} & The value to convert. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Value The value as a String object. 
\end{DoxyReturn}
\Hypertarget{api-impl_8cpp_a5eb451305bdbdb464bcf386d5f02d476}\label{api-impl_8cpp_a5eb451305bdbdb464bcf386d5f02d476} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_type@{\_\_type}}
\index{\_\_type@{\_\_type}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_type()}{\_\_type()}}
{\footnotesize\ttfamily Value via\+::impl\+::\+\_\+\+\_\+type (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Returns the type of a value as a via string object. 


\begin{DoxyParams}{Parameters}
{\em val} & The value to inspect. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Type as a via string Value. 
\end{DoxyReturn}
\Hypertarget{api-impl_8h_a8eecf0f1315d9d96de176e68670392dc}\label{api-impl_8h_a8eecf0f1315d9d96de176e68670392dc} 
\index{api-\/impl.h@{api-\/impl.h}!\_\_type\_cxx@{\_\_type\_cxx}}
\index{\_\_type\_cxx@{\_\_type\_cxx}!api-\/impl.h@{api-\/impl.h}}
\doxysubsubsection{\texorpdfstring{\_\_type\_cxx()}{\_\_type\_cxx()}}
{\footnotesize\ttfamily std\+::string via\+::impl\+::\+\_\+\+\_\+type\+\_\+cxx (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{structvia_1_1Value}{Value}} \&}]{val }\end{DoxyParamCaption})}



Returns the type of a value as a C++ string. 


\begin{DoxyParams}{Parameters}
{\em val} & The value to inspect. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Type as std\+::string. 
\end{DoxyReturn}
