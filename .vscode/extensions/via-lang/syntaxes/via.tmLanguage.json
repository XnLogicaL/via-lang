{
  "schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "via",
  "scopeName": "source.via",
  "patterns": [
    {
      "name": "comment.line.double-slash.via",
      "match": "//.*$"
    },
    {
      "name": "comment.block.via",
      "begin": "/\\*",
      "end": "\\*/",
      "patterns": [
        {
          "match": "/\\*",
          "name": "invalid.illegal.nested-comment.via"
        }
      ]
    },
    {
      "name": "keyword.control.via",
      "match": "\\b(var|const|fn|type|while|for|if|in|of|else|do|and|or|not|shl|shr|as|return|mod|enum|struct|import|using|bool|int|float|string)\\b"
    },
    {
      "name": "variable.language.self.via",
      "match": "\\bself\\b"
    },
    {
      "name": "constant.language.boolean.via",
      "match": "\\b(true|false)\\b"
    },
    {
      "name": "constant.language.nil.via",
      "match": "\\bnil\\b"
    },
    {
      "name": "constant.numeric.via",
      "match": "\\b(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\\b"
    },
    {
      "name": "keyword.operator.arithmetic.via",
      "match": "(\\+|\\-|\\*|/|\\*\\*|%)"
    },
    {
      "name": "keyword.operator.via",
      "match": "(~|\\^|&|!)"
    },
    {
      "name": "keyword.operator.comparison.via",
      "match": "(==|!=|<=|>=|<|>)"
    },
    {
      "name": "keyword.operator.assignment.via",
      "match": "="
    },
    {
      "name": "string.quoted.double.via",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.via",
          "match": "\\\\."
        },
        {
          "name": "string.interpolation.via",
          "begin": "\\\\\\(",
          "end": "\\)",
          "patterns": [
            {
              "name": "variable.other.via",
              "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
            }
          ]
        }
      ]
    },
    {
      "name": "entity.name.function.macro.via",
      "match": "\\b[A-Za-z_][A-Za-z0-9_]*!"
    },
    {
      "match": "(?<=\\bvar\\s)([A-Za-z_][A-Za-z0-9_]*)",
      "name": "variable.other.via"
    },
    {
      "match": "(?<=\\bconst\\s)([A-Za-z_][A-Za-z0-9_]*)",
      "name": "variable.other.via"
    },
    {
      "match": "(?<=\\bfn\\s)([A-Za-z_][A-Za-z0-9_]*)",
      "name": "entity.name.function.via"
    },
    {
      "match": "(?<=\\bstruct\\s)([A-Za-z_][A-Za-z0-9_]*)",
      "name": "entity.name.class.via"
    },
    {
      "match": "(?<=\\benum\\s)([A-Za-z_][A-Za-z0-9_]*)",
      "name": "entity.name.enum.via"
    },
    {
      "match": "(?<=\\bmod\\s)([A-Za-z_][A-Za-z0-9_]*)",
      "name": "entity.name.class.via"
    },
    {
      "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\.([A-Za-z_][A-Za-z0-9_]*)\\b",
      "captures": {
        "1": {
          "name": "variable.name.object.via"
        },
        "2": {
          "name": "variable.name.property.via"
        }
      }
    },
    {
      "match": "\\b([A-Za-z_][A-Za-z0-9_]*)::([A-Za-z_][A-Za-z0-9_]*)\\b",
      "captures": {
        "1": {
          "name": "entity.name.class.via"
        },
        "2": {
          "name": "entity.name.function.via"
        }
      }
    },
    {
      "match": "\\$\\[static\\]",
      "name": "variable.name.property.via"
    },
    {
      "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
      "name": "variable.other.via"
    }
  ]
}