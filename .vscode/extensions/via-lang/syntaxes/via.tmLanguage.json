{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "via",
  "patterns": [
    {
      "name": "keyword.control",
      "match": "\\b(impl|trait|type|with|elif|defined|define|macro|import|export|struct|do|in|let|glb|as|if|else|while|for|return|break|continue|match|case|default|and|not|or|try|catch|raise|enum|pragma)\\b"
    },
    {
      "name": "storage.modifier",
      "match": "\\b(const)\\b"
    },
    {
      "name": "entity.other.attribute-name",
      "match": "@[A-Za-z_][A-Za-z0-9_]*(?=\\s*\\()|@[A-Za-z_][A-Za-z0-9_]*"
    },
    {
      "name": "variable",
      "match": "\b[a-zA-Z_]w*\b"
    },
    {
      "name": "string.quoted.double",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape",
          "match": "\\\\."
        },
        {
          "name": "string.interpolation",
          "begin": "\\$\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "variable.other",
              "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
            }
          ]
        }
      ]
    },
    {
      "name": "comment.line.double-slash",
      "match": "##.*"
    },
    {
      "name": "comment.block",
      "begin": "#\\[",
      "end": "\\]#"
    },
    {
      "name": "support.function.builtin",
      "match": "\\b(print|println)\\b"
    },
    {
      "name": "constant.language.boolean",
      "match": "\\b(true|false)\\b"
    },
    {
      "name": "constant.language.nil",
      "match": "\\b(nil)\\b"
    },
    {
      "name": "constant.numeric.via",
      "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
    },
    {
      "name": "variable.language.self",
      "match": "\\bself\\b"
    },
    {
      "name": "keyword.operator.arithmetic",
      "match": "[+\\-*/%]"
    },
    {
      "name": "keyword.operator.comparison",
      "match": "==|!=|<=|>=|<|>"
    },
    {
      "name": "keyword.operator.assignment",
      "match": "="
    },
    {
      "name": "keyword.operator.logical",
      "match": "\\b(and|or|not)\\b"
    },
    {
      "name": "storage.type",
      "match": "\\b(nil|int|float|bool|string)\\b"
    },
    {
      "name": "entity.name.function",
      "match": "[a-zA-Z_][a-zA-Z0-9_]*!"
    },
    {
      "name": "entity.name.function",
      "match": "fn ?(const)? ?(const)? ([A-Za-z0-9_]+)",
      "captures": {
        "0": {
          "name": "keyword.control"
        },
        "3": {
          "name": "entity.name.function"
        }
      }
    },
    {
      "name": "keyword.control",
      "match": "(fn)[ ]{0,}(\\()",
      "captures": {
        "0": {
          "name": "keyword.control"
        }
      }
    }
  ],
  "scopeName": "source.via"
}
