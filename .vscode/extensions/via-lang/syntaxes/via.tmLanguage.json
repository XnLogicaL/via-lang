{
  "schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "via",
  "scopeName": "source.via",
  "patterns": [
    {
      "name": "keyword.control",
      "match": "\\b(nameof|typeof|type|defer|const|fn|impl|trait|with|elseif|defined|namespace|define|macro|import|export|struct|do|in|var|glb|as|if|else|while|for|return|break|continue|match|case|default|and|not|or|try|catch|raise|enum|pragma)\\b"
    },
    {
      "name": "storage.modifier",
      "match": "\\bconst\\b"
    },
    {
      "name": "variable.language.self",
      "match": "\\bself\\b"
    },
    {
      "name": "support.function.builtin",
      "match": "\\b(print|println)\\b"
    },
    {
      "name": "constant.language.boolean",
      "match": "\\b(true|false)\\b"
    },
    {
      "name": "constant.language.nil",
      "match": "\\bnil\\b"
    },
    {
      "name": "constant.numeric.via",
      "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
    },
    {
      "name": "keyword.operator.arithmetic",
      "match": "[+\\-*/%]"
    },
    {
      "name": "keyword.operator.comparison",
      "match": "==|!=|<=|>=|<|>"
    },
    {
      "name": "keyword.operator.assignment",
      "match": "="
    },
    {
      "name": "keyword.operator.logical",
      "match": "\\b(and|or|not)\\b"
    },
    {
      "match": "(fn)\\s+([A-Za-z_][A-Za-z0-9_]*)",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "entity.name.function"
        }
      }
    },
    {
      "match": "(struct)\\s+([A-Za-z_][A-Za-z0-9_]*)",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "entity.name.class"
        }
      }
    },
    {
      "match": "(->)\\s*([A-Za-z_][A-Za-z0-9_]*)",
      "captures": {
        "1": {
          "name": "keyword.operator"
        },
        "2": {
          "name": "entity.name.type"
        }
      }
    },
    {
      "match": "(:)\\s*([A-Za-z_][A-Za-z0-9_]*)",
      "captures": {
        "1": {
          "name": "keyword.operator"
        },
        "2": {
          "name": "entity.name.type"
        }
      }
    },
    {
      "match": "(as)\\s+([A-Za-z_][A-Za-z0-9_]*)",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "entity.name.type"
        }
      }
    },
    {
      "name": "string.quoted.double",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape",
          "match": "\\\\."
        },
        {
          "name": "string.interpolation",
          "begin": "\\$\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "variable.other",
              "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
            }
          ]
        }
      ]
    },
    {
      "name": "comment.line.double-slash",
      "match": "##.*"
    },
    {
      "name": "comment.block",
      "begin": "#\\[",
      "end": "\\]#"
    },
    {
      "name": "entity.name.function",
      "match": "[A-Za-z_][A-Za-z0-9_]*!"
    },
    {
      "match": "([A-Za-z_][A-Za-z0-9_]*)\\.([A-Za-z_][A-Za-z0-9_]*)",
      "captures": {
        "1": {
          "name": "variable.name"
        },
        "2": {
          "name": "variable.property"
        }
      }
    },
    {
      "name": "variable.name",
      "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
    }
  ]
}