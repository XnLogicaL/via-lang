## Example 1: Variable Declaration and Assignment
let x = 10
let y = 20
println(x + y)  ## Output: 30

## Example 2: Conditionals (if-else)
let x = 5
if x > 0:
  println("Positive")
else:
  println("Negative or Zero")
## Output: Positive

## Example 3: Looping (for loop)
for i = 0, 5:
  print(i)
## Output: 012345

let x = 0
while x > 3:
  println("hello")

## Example 4: Functions
fn add(a: int, b: int) -> int:
  return a + b

println(add(4, 5) + add(34, 35)) ## Output: 78

## Example 5: Recursive functions
fn factorial(const n: int) -> int {
  if n < 0:
    raise "attempt to take the factorial of negative integer"
  elif n <= 1:
    return 1
  return n * factorial(n - 1)
}

## Example 6: Higher-order functions (functions as values)
type callback = (int) -> int
fn outer(x: int) -> callback:
  return fn(y: int) -> int:
    return x + y

let add5 = outer(5)
println(add5(10))  ## Output: 15

fn apply(fun: (int) -> int, x: int) -> int:
  return fun(x)

fn square(x: int):
  return x * x

println(apply(square, 5))  ## Output: 25

let multiply = fn(x: int, y: int):
  return x * y

println(multiply(2))  ## Output: 6

## Example 7: Dynamic arrays (Access and Modification)
let arr = {1, 2, 3, 4}
arr[2] = 10
println(arr[2])  ## Output: 10

## Example 8: Objects and Classes (Simple Class)
struct Point {
  let x: float
  let y: float

  fn new(x: float, y: float) -> () {
    self.x = x
    self.y = y
  }

  fn display() -> ():
    println("Point(${self.x}, ${self.y})")
}

## Example 9: Match cases
match x {
  case 0:
    println("x is zero.")
  default:
    println("x is something")
}

## Example 10: Attributes
@inline
fn add(a: int, b: int) -> int:
  return a + b

let just_three_lmao = add(1, 2) ## Function will be aggressively inlined; resulting in 3, after constant folding

@compile_time ## If statement will be evaluated during compile time
if just_three_lmao == 3: ## Since `just_three_lmao` is a constant after all the optimizations, the if statement will decay
  println("it was indeed 3!")
