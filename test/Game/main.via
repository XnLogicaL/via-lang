import "vector_utils.viam" as Vec2

enum GameState {
    PAUSED = 0x0,
    RUNNING = 0x1,
}

struct Player {
    let name: string
    let position: Vec2
    let health: int = 100

    fn move(new_x: float, new_y: float) -> () {
        self.position = new Vec2(new_x, new_y)
    }

    fn heal(amount: int) -> () {
        if self.health < 100 {
            self.health += amount

            if self.health > 100 {
                self.health = 100
            }
        }
    }
    
    fn new(name: string, pos: Vec2) {
        self.name = name
        self.position = pos
    }
}

struct Game {
    let players: {Player} = {}
    let state: int = GameState::PAUSED

    fn addPlayer(player: Player) -> () {
        table.insert(self.players, player)
    }

    fn removePlayer(name: string) -> () {
        let result = table.find(self.players, fn (i, v) {
            return v.name == name
        })

        if result.v != nil {
            self.players[i] = nil
        }
        else {
            raise "Could not find player ${name} in game instance"
        }
    }
}

fn getCircleArea(radius: float) -> float {
    return math.pi * radius ^ 2
}

fn main() -> () {
    const game = new Game()

    let player = new Player("Alice", new Vec2(0, 0))
    player.move(5, 10)

    game.addPlayer(player)

    let steps = 0
    while steps < 5 {
        steps++
        print("Step ${steps}")

        match steps {
            case 1 { print("Started moving...") }
            case 3 { print("Halfway there!") }
            case 5 { print("Arrived!") }
            default { print("Still moving...") }
        }
    }

    let radius = 3.0
    let area = getCircleArea(radius)
    
    println("Area of circle with radius ${radius} is ${area}")

    return
}

println("Running program")

let result = pcall(main)
let success, error = result::s, result::e
