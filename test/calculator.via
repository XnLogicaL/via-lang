// via-lang calculator console app
import ascii

func eval(str: string) -> float {
  func skip_whitespace(&i: int) -> nil:
    while str[i] == ' ':
      i += 1

  func is_digit(&chr: string) -> bool {
    const code = ascii.decode(chr)
    return code >= 0x30 and code <= 0x39
  }

  func parse_float(&i: int) -> (float, int) {
    skip_whitespace(i)

    var start = i
    while is_digit(str[i]) or str[i] == '.':
      i += 1

    return (str[start:i] as float, i)
  }

  func parse_factor(&i: int) -> (float, int) {
    skip_whitespace(i)

    if str[i] == '-' {
      var [val, i] = parse_factor(i + 1)
      return (-val, i)
    }

    if str[i] == '(' {
      i += 1
      var [val, i] = parse_expr(i)
      if str[i] != ')':
        error("expected )")

      return (val, i + 1)
    }
    else:
      return parse_float(i)
  }

  func parse_term(&i: int) -> (float, int) {
    var [val, i] = parse_factor(i)

    while true {
      skip_whitespace(i)

      if str[i] == '*' {
        var [rhs, i] = parse_factor(i + 1)
        val *= rhs
      }
      elseif str[i] == '/' {
        var [rhs, i] = parse_factor(i + 1)
        val /= rhs
      }
      else:
        break
    }

    return (val, i)
  }

  func parse_expr(i: int) -> float {
    var [val, i] = parse_term(i)

    while true {
      skip_whitespace(i)

      if str[i] == '+' {
        var [rhs, i] = parse_term(i + 1)
        val += rhs
      }
      elseif str[i] == '-' {
        var [rhs, i] = parse_term(i + 1)
        val -= rhs
      }
      else:
        break
    }

    return val
  }

  return parse_expr(0)
}

func display_menu() {
  printn("=== via calculator ===");

  var str = input("Enter mathematical expression: ");
  var [success, result] = try eval(str);

  if not success:
    printn("Error: \(result as string)");
  else:
    printn("Result: \(result as string)");
  
  input("Press any key to continue...");
}

while true:
  display_menu();
