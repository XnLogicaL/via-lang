import std::io

type predicate<T> = fn (k: int, v: T) -> bool

mod array_utils {
    #comptime fn retain<T>(&array: [T], pred: predicate<T>) -> [T] {
        for (k, v) in array {
            ifx pred(k, v):
                array[k] = nil
        }
        return array
    }
}

var nums = [1, 2, 3, 4, 5, 6]
var ref = array_utils::retain(&nums, fn (_, v: int) {
    return v % 2 == 0
})

io::printf(
    "nums: {}, ref: {}",
    nums as string,
    (ref is nums) as string
)
