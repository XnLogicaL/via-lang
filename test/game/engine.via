mod engine {
  const GRAVITY = 9.8

  struct Vec2 {
    const x: float,
    const y: float,

    static func yAxis() -> Vec2 {
      return Vec2 { x: 0, y: 1 }
    }

    func add(&self, &other: Vec2) -> Vec2 {
      return Vec2 {
        x: self.x + other.x,
        y: self.y + other.y,
      }
    }

    func mul1d(&self, n: int) -> Vec2 {
      return Vec2 {
        x: self.x * n,
        y: self.y * n,
      }
    }

    func mul2d(&self, &other: Vec2) -> Vec2 {
      return Vec2 {
        x: self.x * other.x,
        y: self.y * other.y,
      }
    }
  }

  struct Entity {
    position: Vec2,
    velocity: Vec2,
    rotation: int,
    grounded: bool,

    func _applyGravity(&self, dt: float) {
      if not self.grounded {
        var gravity = Vec2::yAxis().mul1d(-GRAVITY * dt)
        self.position.add(&gravity)
      }
    }

    func _applyVelocity(&self, dt: float) {
      self.position.add(&self.velocity)
    }

    func step(&self, dt: float) {
      self._applyVelocity(dt)
      self._applyGravity(dt)
    }
  }
}

export engine
