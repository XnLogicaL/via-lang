import std::io;
import std::array;

fn r110(width: int, steps: int) -> nil {
    // Initialize the row with all 0s except the middle cell
    var row = array::create::<int>(WIDTH, 0);
    row[width / 2] = 1;

    for var t = 0, steps {
        // Print current row
        for [i, cell] in row {
            io::print("#" if cell == 1 else " ")
        }

        io::println();

        // Compute next row using map with index access
        array::transform(&row, fn (i: int, _: int) {
            var left = 0 if i == 0 else row[i-1];   
            var right = 0 if i == width-1 else row[i+1];
            var center = row[i];

            var index = (left shl 2) | (center shl 1) | right;
            return (0b01101110 shr index) & 1;
        });
    }
}

r110(31, 15);
