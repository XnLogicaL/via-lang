/* ===================================================== **
**  This file is a part of the via Programming Language  **
** ----------------------------------------------------- **
**           Copyright (C) XnLogicaL 2024-2025           **
**              Licensed under GNU GPLv3.0               **
** ----------------------------------------------------- **
**         https://github.com/XnLogicaL/via-lang         **
** ===================================================== */

import std::io;
import std::array;
import std::runtime;

fn r110(width: int, steps: int) {
    // Initialize the row with all 0s except the middle cell
    var row = array::create::<int>(width, 0);
    row[width / 2] = 1;

    for var t = 0, steps {
        // Print current row
        for (i, cell) in row {
            io::print("#" if cell == 1 else " ")
        }

        io::println();

        // Compute next row using map with index access
        array::transform(&row, fn (i: int, _: int) {
            const left = 0 if i == 0 else row[i-1];   
            const right = 0 if i == width-1 else row[i+1];
            const center = row[i];
            const index = (left << 2) | (center >> 1) | right;
            return (0b01101110 >> index) & 1;
        });
    }
}

#throws fn get_args() -> (int, int) {
    const argv = runtime::argv();
    return (
        argv[1] as int,
        argv[2] as int
    );
}

if var result = try get_args() {
    r110(result...);
}
